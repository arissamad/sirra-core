package com.sirra.server.util;

import java.math.*;
import java.util.*;
import java.util.Scanner;

import javax.crypto.*;
import javax.crypto.spec.*;

import org.apache.commons.lang3.StringUtils;
import org.eclipse.jetty.util.*;

import antlr.*;

/**
 * Assists with reading environment variables.
 * 
 * Also allows for variables which have been encrypted to be specified in code in your server bootstrap.
 * 
 * The encryption secret key (generated by GenerateSecretKey main class once) should be specified in the 
 * environment variable CONFIG_KEY.
 * 
 * Recommended class to bootstrap Config is "InitConfig", called in your server bootstrap.
 * 
 * @author aris
 */
public class Config {

	public static void main(String[] args) {
		System.out.println("Use this program to create encrypted strings of passwords, api keys, etc.");
		System.out.println("This program assumes you already have generated your secret key. If not, run in sirra-appcore: com.sirra.appcore.util.config.GenerateSecretKey.\n");
		
		Scanner in = new Scanner(System.in);

		System.out.print("Enter config key (this is the secret key you store in the environment variable CONFIG_KEY): ");
		String configKey = in.next();
		
		System.out.print("Enter string to secure:");
		String value = in.next();
		
		try {
			Config config = new Config(configKey);
		    String encryptedValue = config.encrypt(value);
		    
			System.out.println("Here is your encrypted value is. This is what you put in your InitConfig class.");
			System.out.println(encryptedValue);
			
			config.setEncryptedVariable("K1", encryptedValue);
			String originalValue = config.get("K1");
			
			System.out.println("Decrypted again, it is: " + originalValue);
		} catch(Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	protected static Config instance;
	public static Config getInstance() {
		if(instance == null) {
			instance = new Config(null);
		}
		return instance;
	}
	
	protected static String algorithm = "DESede";
	protected Cipher c;
	protected SecretKey secretKey;
	protected Map<String, String> encryptedLookup;
	protected Map<String, String> plaintextLookup;
	
	private Config(String configKey) {
		encryptedLookup = new HashMap();
		plaintextLookup = new HashMap();
		
		if(configKey == null) {
			configKey = get("CONFIG_KEY");
		}
		
		secretKey = getSecretKey(configKey);
		
		try {
			c = Cipher.getInstance(algorithm);
			c.init(Cipher.DECRYPT_MODE, secretKey);
		} catch(Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	public void dump() {
		Map<String, String> map = System.getenv();
		System.out.println("All env variables:\n");
		for(String key: map.keySet()) {
			String value = map.get(key);
			
			System.out.println("  " + key + " -> " + value);
		}
		
		System.out.println("Done with env");
	}
	
	public String get(String key) {
		// First option: Is there an environment variable?
		String val = System.getenv(key);
		if(val != null) return val;
		
		if(encryptedLookup.containsKey(key)) {
			try {
				String encryptedString = encryptedLookup.get(key);
				byte[] encryptedBytes = new BigInteger(encryptedString, 16).toByteArray();
				
				System.out.println("Encrypted bytes, again:" + encryptedBytes);
				
				byte[] decryptedValue = c.doFinal(encryptedBytes);
				return new String(decryptedValue, "UTF-8");
			} catch(Exception e) {
				throw new RuntimeException(e);
			}
		}
		
		if(plaintextLookup.containsKey(key)) {
			return plaintextLookup.get(key);
		}
		
		throw new RuntimeException("No config key found in environment: " + key);
	}
	
	public boolean has(String key) {
		if(System.getenv(key) != null) return true;
		if(encryptedLookup.containsKey(key)) return true;
		if(plaintextLookup.containsKey(key)) return true;
		return false;
	}
	
	public void setEncryptedVariable(String key, String encryptedValue) {
		encryptedLookup.put(key, encryptedValue);
	}
	
	public void setPlaintextVariable(String key, String value) {
		plaintextLookup.put(key, value);
	}
	
	/*****
	 * 
	 */
	protected SecretKey getSecretKey(String configKey) {
		byte[] encoded = new BigInteger(configKey, 16).toByteArray();
	    SecretKey key = new SecretKeySpec(encoded, algorithm);
	    return key;
	}
	
	protected String encrypt(String value) {
		try {
			Cipher encrypterCipher = Cipher.getInstance(algorithm);
			encrypterCipher.init(Cipher.ENCRYPT_MODE, secretKey);
			
			byte[] encryptedBytes = encrypterCipher.doFinal(value.getBytes("UTF-8"));
			
			System.out.println("Encrypted bytes2: " + StringUtils.join(encryptedBytes, " + "));
			
			return new BigInteger(1, encryptedBytes).toString(16);
		} catch(Exception e) {
			throw new RuntimeException();
		}
	}
}
